# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        #如果一次不能够想清楚，就按着例子情况来，至少还能有一定的通过率。
        #然后再考虑复杂的情况
        
        #一
        #head = ListNode(0) #为空还是为0？ #一开始就不是个链表啊
        #current = head
        
        count = 0
        #链表没有长度
        #if len(l1)>=len(l2):
        #     head = l1 #这是指向这条链表吧，不是复制
        # else:
        #     head = l2
        head = l1
        current = head
        while current:
            #没有考虑到l1 和 l2的长度不同问题
            current.val = l1.val + l2.val + count  #Line 30: AttributeError: 'NoneType' object has no attribute 'val'
            
            if current.val >= 10:
                current.val -= 10
                count = 1
            else:
                count = 0
                
            l1 = l1.next
            l2 = l2.next
            current = current.next
            
        if count==1:
            #current.next = ListNode(1)  #Line 43: AttributeError: 'NoneType' object has no attribute 'next'
            current = ListNode(1)
        return head  
        
        #这样会存在着几个情况，一个是没有考虑到边界空值判断情况，
        
        
        
    # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        #如果一次不能够想清楚，就按着例子情况来，至少还能有一定的通过率。
        #然后再考虑复杂的情况
        
        #一
        #head = ListNode(0) #为空还是为0？ #一开始就不是个链表啊
        #current = head
        
        count = 0
        #链表没有长度
        #if len(l1)>=len(l2):
        #     head = l1 #这是指向这条链表吧，不是复制
        # else:
        #     head = l2
        head = l1
        current = head
        while current:
            #没有考虑到l1 和 l2的长度不同问题
            if l1 and l2:
                current.val = l1.val + l2.val + count  #Line 30: AttributeError: 'NoneType' object has no attribute 'val'
                l1 = l1.next
                l2 = l2.next
            elif l1:
                current.val = l1.val + count
                l1 = l1.next
            elif l2:
                current.val = l2.val + count
                l2 = l2.next
            # Run Code Status: Time Limit Exceeded  是不是判断次数太多
                
            if current.val >= 10:
                current.val -= 10
                count = 1
            else:
                count = 0
            if current.next: 

                current = current.next
        #最后current为NULL了。
        #这个是没有连接上吗？    
        if count==1:
            #current.next = ListNode(1)  #Line 43: AttributeError: 'NoneType' object has no attribute 'next'
            current.next = ListNode(1)
        return head                  
        
      #############AC
      # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        head = ListNode(0)
        cur = head
        
        while l1 or l2:
            cur.val  +=  self.addTwoListNumbers(l1,l2)
            if cur.val >= 10:
                cur.val -= 10
                cur.next = ListNode(1)
            else:
                if l1 and l1.next or l2 and l2.next:
                    cur.next = ListNode(0)
            
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next
            cur = cur.next
        return head
        
    def addTwoListNumbers(self,l1,l2):
        if not l1 and not l2:
            return None
        if not l1:
            return l2.val
        if not l2:
            return l1.val
        return l1.val + l2.val
