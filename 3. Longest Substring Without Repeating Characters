class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        #从start开始，实时判断后续的字符是否在里面，如果不在的话，就加入，如果在的话，表明到此子字符串重复，要保留，最后比较最大子字符串
        #特殊情况 None,空""和1
        if not s:
            return 0
        if len(s)<=1:
            return len(s)
        
        substring = {}
        start = 0
        maxlength = 0
        
        for index,value in enumerate(s):
            if value in substring and start <= substring[value]: #表示检测到的是在start之后出现的，而不是之前就存在的
                start = substring[value] + 1
            else:
                #需要每次都知道当前最大长度吗？
                maxlength = max(maxlength,index - start + 1)
                
            substring[value] = index
            
            # if value not in substring:
            #     substring[value] = index
            # else:
            #      #不需要+1 没有考虑到完全不重复的问题
            #     start = index #直接跳到重复的位置上 但是dvdf  是d重复 但是
        return maxlength
        
